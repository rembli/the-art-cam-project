QUART
https://pgjones.gitlab.io/quart/tutorials/deployment.html

---------------------------------------------------------------

DOCKER
https://www.scalyr.com/blog/create-docker-image/

# DQS-Image einrichten
docker images
docker pull debian
docker run --name dqs --privileged -it --entrypoint bash debian 
    > apt-get update
    > apt -y install net-tools
    > apt -y install curl
    > apt -y install nano
    > apt -y install python3
    > apt -y install python3-pip
docker tag dqs rembli/dqs

docker run --name dqs -p 80:8000 -v //c/Data/Dev:/mnt/host -it --entrypoint bash rembli/dqs   
    > mkdir app
    > cd /mnt/Host/PythonLab/the-art-cam-project
    > cp -R . /app
    > cd /app
    > pip3 install -R requirements.txt
    > nano run.sh
        cd app
        container_ip=$(hostname -i)
        echo "Starting hypercorn server für container with IP ${container_ip}"
        hypercorn --bind "${container_ip}:80" app

WICHTIG:
- Damit vom Host auf den Docker-Container zugegriffen werden kann, ist es ENTSCHEIDEND, dass beim Start von Quart auf 0.0.0.0 gebunden wird (UND NICHT AUF 127.0.0.1 ODER localhost)!!!
- Damit WebSockets auch in JELASTIC funktionieren, MUSS hypercorn mit der IP des Containers laufen. Bsp. hypercorn --bind "192.168.2.22:80" app

# Container ausführen
docker run -d --name dqs -p 80:8000 -v //c/Data/Dev:/mnt/host -it --entrypoint "/app/run.sh" rembli/dqs   
docker exec -it dqs bash
docker exec -it --privileged dqs bash

# Neue Version erzeugen
docker commit dqs rembli/dqs
docker stop dqs
docker rm dqs

# Monitoring
docker ps 
docker ps -a 
docker inspect dqs
docker logs dqs
docker port dqs

# Images lokal speichern oder laden
docker save -o dqs dqs
docker image load -i dqs

---------------------------------------------------------------

DOCKER-REGISTRY

https://hub.docker.com/ 
un: rembli
pw: rembli@docker2020

docker tag 65465464 rembli/dqs
docker rmi dqs
docker push rembli/dqs

---------------------------------------------------------------

DOCKER-JELASTIC

https://rembli-003.jelastic.dogado.eu/

Environment
    - Am einfachsten ist es, wenn die App auf Port 80 läuft (das Mapping auf den Stanadardport 443 für HTTPS erfolgt automatisch - wie?)
    - Nur Container (NGINX nicht erfoderlich!)
    - Public IP im Python Container aktivieren ist nicht erforderlich
    - als Entrypoint "/app/run.sh" eintragen (kein Command)
    - SSL aktivieren

---------------------------------------------------------------

TIPP: WORKING WITH SSH

Vorab:
- mit PuttyGen Public und Private Keys erzeugen
- mit Pageant diese Keys für die Authentisierung verwenden

WinSCP zum Kopieren der Dateien per SSH

Putty: ssh 167287-34858@gate.jelastic.dogado.eu -p 3022 
- Host: gate.jelastic.dogado.eu
- Port: 3022
- Username: 167287-34858

---------------------------------------------------------------

TIPP: CHECK IF WEBSOCKETS WORK (LOCALLY IN CONTAINER)

# run hypercorn as background process
hypercorn --bind "192.168.2.22:80" app &

# check if app is up and running
curl http://192.168.2.22:80

# check if websocket works
curl --include \
       --no-buffer \
       --header "Connection: Upgrade" \
       --header "Upgrade: websocket" \
       --header "Host: 192.168.2.22:80" \
       --header "Origin: http://192.168.2.22:80" \
       http://192.168.2.22:80/imagestream

# kill hypercorn process to test different config
killall hypercorn 

---------------------------------------------------------------

TIPP: GET INFO ABOUT NETWORK
WIN: 
    ipconfig
    netstat
    netstat -b
    netstat -at
    netstat -ap
CONTAINER: 
    ifconfig -a
    hostname -I
    netstat -tulpn

---------------------------------------------------------------

TIPP: CREATE UP-TO-DATE REQUIREMENTS FILE

pipreqs --force
